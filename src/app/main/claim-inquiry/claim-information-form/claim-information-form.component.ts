import { Component, OnInit, ViewChild, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import * as moment from 'moment';
import { AuthenticationService, Logger } from '@app/core';
import { RegisterClaimService } from '@app/main/register-claim/register-claim.service';
import { ToastrService } from 'ngx-toastr';
import { MatDialogRef } from '@angular/material';
import { finalize, takeUntil } from 'rxjs/operators';
import { DxFormComponent } from 'devextreme-angular/ui/form';
import { Router, ActivatedRoute } from '@angular/router';
import { DataService } from '@app/_shared/crud-service/data.service';
import { Illness } from '@app/_models/claim/illness';
import { Subscription, forkJoin, Subject } from 'rxjs';
import { Currency, PolicyClaimDocument, ClaimPartner, ProcessHistory, Relation, Bank, ClaimDocFile, ClaimDoc, CompanyClaim, CompanyPolicy, ClaimFlowType, Claim, Document, ClaimType } from '@app/_models/claim';
import { Location } from '@angular/common';
import notify from 'devextreme/ui/notify';
import * as _ from 'lodash';

const log = new Logger('ClaimInformation Form');

@Component({
    selector: 'app-claim-information-form',
    templateUrl: './claim-information-form.component.html',
    styleUrls: ['./claim-information-form.component.scss']
})
export class ClaimInformationFormComponent implements OnInit, OnDestroy {
    private unsub: Subject<void> = new Subject<any>();

    @ViewChild('claimForm') claimForm: DxFormComponent;
    @ViewChild(DxFormComponent) myform: DxFormComponent;
    itemCount: number;
    companies = [{
        'ID': 1
    }, {
        'ID': 2,
    }, {
        'ID': 3,
    }];

    claimDoc: ClaimDoc[] = [];
    claimDocFile: ClaimDocFile[] = [];
    processHistory: ProcessHistory[] = [];
    illness: Illness[] = [];
    currency: Currency[] = [];
    policyClaimDocumen: PolicyClaimDocument[] = [];
    claimPartner: ClaimPartner[] = [];
    relations: Relation[] = [];
    banks: Bank[] = [];
    companyClaim: CompanyClaim[] = [];
    claimFlowType: ClaimFlowType[] = [];
    document: Document[] = [];
    claimType: ClaimType[] = [];

    documentFiles = [];
    fileUploadDataSource = [];
    autoGeneratedData = [];

    remarks = '';
    isInsured = 'No';
    isPageLoadingVisible = false;
    isFormEditable = false;
    isDocumentEditable = false;
    isOtherIllness = false;
    isOtherBank = false;
    isPopupVisible = false;
    isAutoPopupVisible = false;
    isNeedBenefiecyInfo = false;
    isNeedBankInsured = false;
    isInputAmount = false;
    isPopupDeleteVisible = false;
    selectedTransactionId = '';
    selectedClaimRegNo = '';
    first = true;
    canSave = false;
    isFlowFound = false;

    constructor(
        private router: ActivatedRoute,
        private DS: DataService,
        private CD: ChangeDetectorRef,
        private location: Location,
        private authService: AuthenticationService
    ) {
        this.itemCount = this.companies.length;
        this.isPageLoadingVisible = true;

        this.onIllnessChanged = this.onIllnessChanged.bind(this);
        this.onBankChanged = this.onBankChanged.bind(this);

    }

    ngOnInit(): void {
        const id = this.router.snapshot.paramMap.get('id');
        this.getInitialData(id);
    }
    ngOnDestroy(): void {
        this.CD.detach();
        this.unsub.next();
        this.unsub.complete();
    }
    getProcessHistory(id: any): void {
        const dataObs = this.DS.readObs(ProcessHistory, {
            claim_reg_no: id
        });
        const dataRes = dataObs.subscribe(
            (data: ProcessHistory[]) => {
                this.processHistory = data['data'];
                this.CD.detectChanges();
            },
            err => {
                console.log(err);
            }
        );
    }

    onBack(): void {
        this.location.back();
    }

    onCancel(): void {
        this.isPopupDeleteVisible = true;
    }

    onSave() {
        return this.DS.updateObs(Claim, {
            key: 'save',
            transactionId: this.claimPartner['transactionId'] || '',
            transactionFormId: this.claimPartner['transactionFormId'] || '',
            sourceAppId: this.claimPartner['sourceAppId'] || '',
            claimRegNo: this.claimPartner['claimRegNo'] || '',
            policyNo: this.claimPartner['policyNo'] || '',
            eventDate: moment(this.claimPartner['eventDate']).format('YYYY-MM-DD') || '',
            claimTypeCode: this.claimPartner['claimTypeCode'] || '',
            claimTypeName: this.claimPartner['claimTypeName'] || '',
            claimStatusCode: this.claimPartner['claimStatusCode'] || '',
            claimStatusName: this.claimPartner['claimStatusName'] || '',
            claimAmount: this.claimPartner['claimAmount'] || '',
            illnessCode: this.claimPartner['illnessCode'] || '',
            illnessName: this.claimPartner['illnessName'] || '',
            illnessText: this.claimPartner['illnessText'] || '',
            beneficiery: this.claimPartner['beneficiery'] || '',
            beneficieryKtpNo: this.claimPartner['beneficieryKtpNo'] || '',
            beneficieryRelationInsuredCode: this.claimPartner['beneficieryRelationInsuredCode'] || '',
            beneficieryFamilyCardNo: this.claimPartner['beneficieryFamilyCardNo'] || '',
            relationship: this.claimPartner['relationInsuredCode'] || '',
            relationInsuredCode: this.claimPartner['relationInsuredCode'] || '',
            partnerFamilyCardNo: this.claimPartner['partnerFamilyCardNo'] || '',
            partnerAccountName: this.claimPartner['partnerAccountName'] || '',
            partnerAccountNo: this.claimPartner['partnerAccountNo'] || '',
            partnerCurrency: this.claimPartner['partnerCurrency'] || '',
            partnerBank: this.claimPartner['partnerBank'] || '',
            partnerBankName: this.claimPartner['partnerBankName'] || '',
            isInsured: this.claimPartner['claimantIsInsured'] || '',
            claimantRelationInsuredCode: this.claimPartner['claimantRelationInsuredCode'] || '',
            claimantRelationInsuredName: this.claimPartner['claimantRelationInsuredName'] || '',
            claimantName: this.claimPartner['claimantName'] || '',
            claimantPhoneNo: this.claimPartner['claimantPhoneNo'] || '',
            claimantEmailAddress: this.claimPartner['claimantEmailAddress'] || '',
            createdBy: this.claimPartner['createdBy'] || '',
            createdDate: moment(this.claimPartner['createdDate']).format('YYYY-MM-DD') || '',
            modifiedBy: this.authService.getUser()['username'] || '',
            modifiedDate: moment(this.claimPartner['modifiedDate']).format('YYYY-MM-DD') || '',
            isDelete: this.claimPartner['isDelete'] || '',
            phoneNo: this.claimPartner['phoneNo'] || ''
        })
    }

    handleOnSave() {
        this.onSave().subscribe(res => {
            if (res['ok']) {
                notify(_.get(res, 'message'), 'success', 600);
            } else {
                notify('Failed to update', 'error', 600);
            }
        })
    }

    onSubmit(): void{
        if (this.isInputAmount && !this.claimPartner['claimAmount']) {
            notify('Claim amount can\'/t be empty', 'error', 600);
            return;
        }

        if (this.claimFlowType[0]['checkDocument']) {

            const mandatory = this.claimDoc.filter((x) => x['condition'] === true);
            if (mandatory.length > 0) {

                mandatory.map((x, i) => {   
                    
                    const dataObs = this.DS.readObs(ClaimDocFile, {
                        transaction_id: x.transactionId,
                        transaction_document_id: x['transactionDocumentId']
                    });
                    const dataRes = dataObs.subscribe(
                        (data: ClaimDocFile[]) => {
                            this.documentFiles[x['transactionDocumentId']] = data['data'];
                            if (mandatory.length==i+1) {
                                const tmp = this.documentFiles.filter(y => y && y.length>0)
                                if (tmp.length >= mandatory.length) {
                                    this.onSave().subscribe(res => {
                                        if (res['ok']) {
                                            notify(_.get(res, 'message'), 'success', 600);
                                            this.submitData();
                                        } else {
                                            notify('Failed to update', 'error', 600);
                                        }
                                    })
                                } else {
                                    notify('Data can not be submitted. Please complete the claim documents!', 'error', 600);
                                }
                            }
                            // this.CD.detectChanges();
                        },
                        err => {
                            console.log(err);
                        }
                    );
                })
            } else {
                this.onSave().subscribe(res => {
                    if (res['ok']) {
                        notify(_.get(res, 'message'), 'success', 600);
                        this.submitData();
                    } else {
                        notify('Failed to update', 'error', 600);
                    }
                })
            }
        
        } else {
            this.onSave().subscribe(res => {
                if (res['ok']) {
                    notify(_.get(res, 'message'), 'success', 600);
                    this.submitData();
                } else {
                    notify('Failed to update', 'error', 600);
                }
            })
        }
    }

    submitData() {
        this.DS.updateObs(Claim, {
            key: 'submit',
            transactionFormId: this.claimPartner['transactionFormId'],
            transactionId: this.claimPartner['transactionId'],
            idUserPartner: this.authService.getUser()['username']
        }).subscribe((res: any) => {
            if (_.get(res, 'data.status') === 0) {
                setTimeout(() => {
                    notify(_.get(res, 'message'), 'error', 600);
                }, 700);
            } else {
                notify(res.message, 'success', 600);
                
                if (_.get(res, 'data.claimAutoGenerated.length') > 0) {
                    this.autoGeneratedData = res.data.claimAutoGenerated;
                    this.isAutoPopupVisible = true;
                    this.CD.detectChanges();

                } else {
                    setTimeout(() => {
                        this.location.back();
                    }, 600);
                }
            }
        });
    }

    getClaimDocFile(transactionId, transaction_document_id): void {
        const dataObs = this.DS.readObs(ClaimDocFile, {
            transaction_id: transactionId,
            transaction_document_id  
        });
        const dataRes = dataObs.subscribe(
            (data: ClaimDocFile[]) => {
                this.documentFiles[transaction_document_id] = data['data'];
                this.CD.detectChanges();
            },
            err => {
                console.log(err);
                notify('Failed to retrieve data', 'error', 600);
            }
        );
    }

    getInitialData(id): void {
        const illnessObs = this.DS.readObs(Illness);
        const currencyObs = this.DS.readObs(Currency);
        const relationObs = this.DS.readObs(Relation);
        const bankObs = this.DS.readObs(Bank);
        const processHistoryObs = this.DS.readObs(ProcessHistory, {
            claim_reg_no: id
        });
        const claimPartnerObs = this.DS.readObs(ClaimPartner, {
            claim_reg_no: id,
            partner: this.authService.getCompanyId()
        });


        forkJoin([illnessObs, currencyObs, processHistoryObs, claimPartnerObs, relationObs, bankObs])
            .pipe(takeUntil(this.unsub))
            .subscribe(
                (res: any) => {
                    this.illness = res[0];
                    this.currency = res[1];
                    this.processHistory = res[2]['data'];
                    this.claimPartner = res[3]['data'][0];
                    this.relations = res[4];
                    this.banks = res[5];

                    // this.claimPartner['claimAmount'] = this.formatNumber(res[4]['data'][0]['claimAmount'])
                    this.claimPartner['claimAmount'] = parseInt(this.claimPartner['claimAmount'])
                    if (this.claimPartner['claimantIsInsured'] === 1) {
                        this.isInsured = 'Yes';
                    }

                    this.selectedTransactionId = this.claimPartner['transactionId'];
                    this.selectedClaimRegNo = this.claimPartner['claimRegNo'];

                    // this.getFormsDocument(this.getClaimTypeCode(this.claimPartner['claimTypeCode']));
                    this.getCompanyClaim(this.claimPartner['policyNo'], this.claimPartner['claimTypeCode']);
                    this.getCompanyPolicy(this.claimPartner['policyNo']);
                    this.getClaimDoc(id, this.claimPartner['transactionId']);

                    this.claimPartner['relationInsuredCode'] = this.claimPartner['claimantRelationInsuredCode'];

                    if (this.claimPartner['partnerBank'] === 'BANK190000') {
                        this.isOtherBank = true;
                    } else {
                        this.isOtherBank = false;
                    }

                    this.claimPartner = res[3]['data'][0];

                    this.CD.detectChanges();
                    this.first = false;
                },
                err => {
                    console.log(err);
                    notify('Failed to retrieve data', 'error', 600);
                    this.isPageLoadingVisible = false;
                    this.CD.detectChanges();
                }
            );
    }

    formatDatePeriod(start, end): string {
        return `${moment(start).format('DD MMMM YYYY')} - ${moment(end).format('DD MMMM YYYY')}`;
    }

    getClaimDoc(claim_reg_no, transaction_id): void {
        const claimDocObs = this.DS.readObs(ClaimDoc, {
            // claim_reg_no,
            transaction_id
        }).subscribe(
            (res: ClaimDoc[]) => {
                this.claimDoc = res['data'];
                this.CD.detectChanges();
            },
            err => {
                console.log(err);
                notify('Failed to retrieve data', 'error', 600);
            }
        );

    }
    onIllnessChanged(e): void {
        this.claimPartner['illness'] = e.value;
        if (e.value === 'ILLN190000') {
            this.isOtherIllness = true;
            this.claimPartner['otherIllness'] = '';
        } else {
            this.isOtherIllness = false;
            this.claimPartner['otherIllness'] = '';
        }

        this.CD.detectChanges();
    }
    onBankChanged(e): void {
        this.claimPartner['bankCode'] = e.value;
        if (e.value === 'BANK190000') {
            this.isOtherBank = true;
        } else {
            this.isOtherBank = false;
        }
    }

    log(e) {
        this.CD.detectChanges();

    }

    viewUploadedFile(e): void {
        this.fileUploadDataSource = this.documentFiles[e.key].map(x => x.documentId === e.row.data.documentId && x.fileDownloadUri);
        this.isPopupVisible = true;
    }

    formatDate(date): string {
        return moment(date).format('DD MMMM YYYY HH:mm:ss');
    }
    getCompanyClaim(policyNo, claimTypeCode): Subscription {

        return this.DS.readObs(CompanyClaim, {
            'policy_no': policyNo,
            'claim_type_code': claimTypeCode
        })
            .subscribe(
                (res: CompanyClaim[]) => {
                    if (res['data'].length > 0) {
                        this.companyClaim = res['data'];
                        if (res['data'][0].needBeneficiaryInfo) {

                            this.isNeedBenefiecyInfo = true;
                        } else {
                            this.isNeedBenefiecyInfo = false;
                        }
                        if (res['data'][0].needBankInsured) {
                            this.isNeedBankInsured = true;
                        } else {
                            this.isNeedBankInsured = false;
                        }

                        //override
                        if (this.claimPartner['claimStatusCode'] === 'SC003') {
                            this.isNeedBenefiecyInfo = false;
                        }
                        
                        this.CD.detectChanges();
                    }
                },
                err => {
                    console.error(err);
                    notify('Failed to retrieve data', 'error', 600);
                }
            );
    }

    getCompanyPolicy(policyNo): Subscription {

        return this.DS.readObsId(CompanyPolicy, policyNo)
            .subscribe(
                (res: CompanyPolicy[]) => {
                    this.getClaimFlowType(res['data'].claimFlow.id);

                    this.CD.detectChanges();
                },
                err => {
                    console.error(err);
                    notify('Failed to retrieve data', 'error', 600);
                }
            );
    }

    getClaimFlowType(flowId): Subscription {

        return this.DS.readObs(ClaimFlowType, {
            'claim_flow_id': flowId
        })
            .subscribe(
                (res: ClaimFlowType[]) => {

                    if (this.claimPartner['claimStatusCode'] === 'SC001') {
                        this.claimFlowType = res['data'].filter(x => x.flowType === 'Claim Registration');
                    } else if (this.claimPartner['claimStatusCode'] === 'SC003') {
                        this.claimFlowType = res['data'].filter(x => x.flowType === 'Document Revision');
                    } else if (this.claimPartner['claimStatusCode'] === 'SC004') {
                        this.claimFlowType = res['data'].filter(x => x.flowType === 'Input Claim Amount');
                    } else {
                        this.isFormEditable = false;
                    }

                    if (this.claimFlowType.length > 0) {
                        this.isFlowFound = true;
                    } else {
                        this.isFlowFound = false;
                    }

                    if (this.claimPartner['claimStatusCode'] === 'SC002' || this.claimPartner['claimStatusCode'] === 'SC005') {
                        this.isInputAmount = true;
                        this.isFormEditable = false;
                        this.isDocumentEditable = false;
                    }
                    if (this.claimFlowType.length > 0) {
                        if (this.claimFlowType[0]['inputAmount']) {
                            this.isInputAmount = true;
                            this.canSave = true;
                        } else {
                            this.isInputAmount = false;
                            this.canSave = false;
                        }

                        if (this.claimFlowType[0]['editInformation']) {
                            this.isFormEditable = true;
                            this.canSave = true;
                        } else {
                            this.isFormEditable = false;
                            // this.canSave = false;
                        }

                        if (this.claimFlowType[0]['editDocument']) {
                            this.isDocumentEditable = true;
                        } else {
                            this.isDocumentEditable = false;
                        }
                    }
                    this.isPageLoadingVisible = false;

                    this.CD.detectChanges();
                },
                err => {
                    console.error(err);
                    notify('Failed to retrieve data', 'error', 600);
                }
            );
    }

    onIsInsuredChanged(e): void {
        if (e.value === 'Yes') {
            if (!this.first) {
                this.claimPartner['claimantName'] = this.claimPartner['participant'];
                this.claimPartner['claimantPhoneNo'] = this.claimPartner['phoneNo1'];
                this.claimPartner['claimantRelationInsuredCode'] = 'REL01';
                this.claimPartner['claimantEmailAddress'] = this.claimPartner['emailAddress'];
            }
            this.isInsured = 'Yes';
            this.claimPartner['claimantIsInsured'] = 1;
        } else {
            this.claimPartner['claimantName'] = '';
            this.claimPartner['claimantPhoneNo'] = '';
            this.claimPartner['claimantRelationInsuredCode'] = '';
            this.claimPartner['claimantEmailAddress'] = '';
            this.isInsured = 'No';
            this.claimPartner['claimantIsInsured'] = 0;
        }
    }

    claimAmountChanged(e): void {
        this.claimPartner['claimAmount'] = e.value;
    }

    formatNumber(num): string {
        return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,');
    }

    handleYes(): void {
        if (this.remarks) {
            this.isPopupDeleteVisible = false;

            this.DS.updateObs(Claim, {
                key: 'cancel',
                transactionFormId: this.claimPartner['transactionFormId'],
                transactionId: this.claimPartner['transactionId'],
                remarks: this.remarks,
                idUserPartner: this.authService.getUser()['username']
            }).subscribe(() => {
                this.location.back();
            });
        } else {
            notify('Notes required', 'error', 600);
        }
    }

    handleNo(): void {
        this.isPopupDeleteVisible = false;
    }

    onDocumentChanged(e): void {
        this.documentFiles = e;
    }

    getFormsDocument(claim_id): void {
        this.DS.readObs(Document, {
            claim_id
        }).subscribe(
            (res: Document[]) => {
                this.document = res['data'];
                this.CD.detectChanges();
            },
            err => {
                console.error(err);
                notify('Failed to retrieve data', 'error', 600);
            }
        );
    }

    checkStatus(): string {
        if (this.claimFlowType[0]['checkDocument']) {
            const mandatory = this.document.filter((x) => x['condition'] === true);

            const check = mandatory.filter((x) => {
                if (this.documentFiles[x.documentId]) {
                    return this.documentFiles[x.documentId]
                }

                // return this.documentFiles.find((y) => {
                //     console.log('y ', y)
                // y.map(z => {
                //     return z.id === x.documentId;
                // })
                // });
            });

            if (check.length === mandatory.length) {
                return 'SC002';
            } else {
                return 'SC001';
            }

        } else {
            return 'SC002';
        }

    }
    getClaimType(policy_id): void {
        this.DS.readObs(ClaimType, {
            policy_id
        }).subscribe(
            (res: ClaimType[]) => {

                this.claimType = res;
                // this.claimType = res['data'].filter(x => x.usedByCustomer);
                this.CD.detectChanges();
            },
            err => {
                console.error(err);
                notify('Failed to retrieve data', 'error', 600);
            }
        );
    }

    getClaimTypeCode(claim_type_code): void {
        const tmp = this.claimType['data'].filter(x => x.claim_type_code);
    }

    refresh() {
        this.CD.detectChanges();
    }

    closeModal(): void {
        this.isAutoPopupVisible = false;
        this.CD.detectChanges();
        setTimeout(() => {
            this.location.back();
        }, 200);
    }


}
