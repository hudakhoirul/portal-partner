import {Component, OnInit, ViewChild, AfterViewInit, ChangeDetectorRef, OnDestroy, ElementRef} from '@angular/core';
import {Logger, AuthenticationService} from '@app/core';
import { DataService } from '@app/_shared/crud-service/data.service';
import { MatStepper } from '@angular/material/stepper';
import { DxFormComponent, DxDataGridComponent } from 'devextreme-angular';
import { Subscription, forkJoin, Subject } from 'rxjs';
import { confirm } from 'devextreme/ui/dialog';
import * as _ from 'lodash';
import * as moment from 'moment';
import notify from 'devextreme/ui/notify';
import { takeUntil } from 'rxjs/operators';
import { 
    Currency,
    CompanyPolicy,
    Policy,
    Illness,
    PolicyClaimDocument,
    ClaimType,
    ClaimFlowType,
    CompanyClaim,
    Relation,
    ClaimDocFile,
    Bank,
    ClaimDoc,
    ClaimPartner,
    Claim,
    Document,
    ClaimStatus,
} from '@app/_models/claim';
import { Router } from '@angular/router';

const log = new Logger('RegisterClaim Form');

@Component({
    selector: 'app-register-claim-form',
    templateUrl: './register-claim-form.component.html',
    styleUrls: ['./register-claim-form.component.scss']
})
export class RegisterClaimFormComponent implements OnInit, AfterViewInit, OnDestroy {

    @ViewChild('insuredForm') insuredForm: DxFormComponent;
    @ViewChild('claimForm') claimForm: DxFormComponent;
    // @ViewChild('claimDocGrid') claimDocGrid: DxDataGridComponent;
    @ViewChild('illnessItem') illnessItem;
    @ViewChild('stepper') stepper;
    @ViewChild('fileUploader') fileUploader;
    @ViewChild('claimAmount') claimAmount: ElementRef;
    
    private unsub: Subject<void> = new Subject<any>();
    claim_id = '';
    document_type = '';
    uploadHeaders = {
        Authorization: this.AuthService.getToken()
    };
    insured = {
        product: {},
        insuredName: '',
        idMemberPartner: '',
        ktpNo: '',
        dateOfBirth: '',
    };

    initialData = {
        insuredName: '',
        idMemberPartner: '',
        insuredNo: '',
        policyNo: '',
        phoneNo: '',
        productName: '',
        email: '',
        insurancePeriodFrom: '',
        insurancePeriodTo: '',
        eventDate: '',
        
        claimType: '',
        claimAmount: 0,
        illness: '',
        otherIllness: '',

        claimantName: '',
        claimantPhoneNo: '',
        claimantRelationship: '',
        claimantEmailAddress: '',
        
        beneficiary: '',
        beneficiaryKtpNo: '',
        relationshipBeneficiary: '',
        beneficiaryFamilyCardNo: '',

        accountNo: '',
        accountCurrencyCode: '',
        accountBankCode: '',
        accountName: '',

        bankCode: '',
        sumAssured: '',
        virtualAccount: '',

        illnessText: '',
        accountBankText: '',
        idUserPartner: '',
        partnerName: '',
        currency: ''
    };

    insuredInformation = _.clone(this.initialData);
    postRegistrationData = {};
    maxDate = new Date();
    policy: Policy[] = [];
    illness: Illness[] = [];
    currency: Currency[] = [];
    claimType: ClaimType[] = [];
    claimFlowType: ClaimFlowType[] = [];
    companyClaim: CompanyClaim[] = [];
    relations: Relation[] = [];
    document: Document[] = [];
    claimDocFile: ClaimDocFile[] = [];
    companyPolicy: CompanyPolicy[] = [];
    bank: Bank[] = [];
    claimStatus: ClaimStatus[] = [];
    detailPolicy = {};
    selectedFlowType = {};
    selectedProduct:any  = {};
    selectedClaimType = {};
    uploadedForm = [];
    uploadedFiles = [];
    documentFiles = [];
    fileUploadDataSource = [];
    isInputAmount = false;
    isNeedBenefiecyInfo = false;
    isNeedBankInsured = false;
    isInsured = 'No';
    isStepOneComplete = false;
    isStepTwoComplete = false;
    isStepThreeComplete = false;
    isMultiSelected = false;
    isPopupVisible = false;
    isPageLoadingVisible = false;
    isButtonListLoading = false;
    isButtonRegistrationLoading = false;
    isOtherBank = false;
    isOtherIllness = false;
    isFormEditable = true;
    isFlowFound = false;
    autoGeneratedData = [];
    
    constructor(
        private DS: DataService,
        private CD: ChangeDetectorRef,
        private AuthService: AuthenticationService,
        private router: Router,
    ) {
        this.isPageLoadingVisible = true;
        this.onClaimTypeChanged = this.onClaimTypeChanged.bind(this);
        this.onIllnessChanged = this.onIllnessChanged.bind(this);
        this.onBankChanged = this.onBankChanged.bind(this);
        this.onProductChanged = this.onProductChanged.bind(this);
    }

    ngOnInit(): void {
        this.getInitialData();
    }

    ngAfterViewInit(): void {
    }

    onProductChanged(e): void {
        this.selectedProduct = e.value;
    }

    ngOnDestroy(): void {
        this.CD.detach();
        this.unsub.next();
        this.unsub.complete();
    }

    goBack(stepper: MatStepper): void{
        stepper.previous();
    }

    goForward(e): void{
        if (this.stepper.selectedIndex === 0) {
            const isValid = this.insuredForm.instance.validate();
            if (isValid.isValid) {
                this.isStepOneComplete = true;
                this.getDetailInsured(e.data.insuredNo, e.data.policyNo, this.insured.product['sourcePolicy'].code);
                this.getClaimFlowType(this.insured.product['claimFlow'].id);
                this.stepper.next();
            }
        } else if (this.stepper.selectedIndex === 1) {
            this.claimForm.instance.validate();
            if (this.claimForm.instance.validate().isValid) {
                this.isStepTwoComplete = true;
                this.stepper.next();
            }
        }
    }

    getListInsured(): Subscription {

        if (this.isButtonListLoading){
            return;
        }

        if (this.insuredForm.instance.validate().isValid && this.insured.product['id']) {
            this.isButtonListLoading = true;

            this.getClaimType(this.insured.product['id']);
            
            const params = {
                policy_no: this.insured.product['policyNo']
            };

            if (this.insured.insuredName) {
                params['insured_name'] = this.insured.insuredName;
            }

            if (this.insured.idMemberPartner) {
                params['id_member_partner'] = this.insured.idMemberPartner;
            }

            if (this.insured.ktpNo) {
                params['ktp_no'] = this.insured.ktpNo;
            }

            if (this.insured.dateOfBirth) {
                params['date_of_birth'] = moment(this.insured.dateOfBirth).format('YYYY-MM-DD');
            }

            if (this.insured.product['sourcePolicy'].code) {
                params['source_code'] = this.insured.product['sourcePolicy'].code;
            }

            return this.DS.readObs(Policy, params)
            .subscribe(
                (res: any) => {
                    if (res['data'].length > 0) {
                        this.policy = res['data'];
                        this.isButtonListLoading = false;
                        this.CD.detectChanges();
                    } else {
                        this.policy = [];
                        this.isButtonListLoading = false;
                        this.CD.detectChanges();
                        notify('Data not found', 'error', 600);
                    }

                    setTimeout(() => {
                        this.CD.detectChanges();
                    }, 300);
                },
                err => {
                    console.error(err);
                    this.policy = [];
                    this.isButtonListLoading = false;
                    this.CD.detectChanges();
                    notify('Failed to retrieve data', 'error', 600);
                },
            );
        }
    }

    getDetailInsured(insuredNo, policyNo, sourceCode): Subscription {
        this.insuredInformation = this.initialData;
        this.insuredInformation.illness = '';
        this.insuredInformation.claimType = '';
        this.insuredInformation.claimAmount = 0;
        this.insuredInformation.eventDate = '';
        this.insuredInformation.claimantName = '';
        this.insuredInformation.claimantPhoneNo = '';
        this.insuredInformation.claimantEmailAddress = '';
        this.insuredInformation.claimantRelationship = '';
        this.isInsured = 'No';
        this.isNeedBenefiecyInfo = false;
        this.isNeedBankInsured = false;

        this.CD.detectChanges();
        
        this.isOtherIllness = false;

        return this.DS.readObs(Policy, {
            'insured_no': insuredNo,
            'policy_no': policyNo,
            'source_code': sourceCode
        })
            .subscribe(
                (res: any) => {
                    this.insuredInformation = _.merge(this.insuredInformation, res.data[0]);
                    this.insuredInformation['productName'] = this.selectedProduct['name'];
                    this.detailPolicy = res.data[0];
                    if (this.claimAmount) {
                        this.claimAmount['value'] = 0;
                    }
                    this.CD.detectChanges();
                },
                err => {
                    console.error(err);
                    notify('Failed to retrieve data', 'error', 600);
                }
            );
    }

    // getClaimDocument(): Subscription {
    //     return this.DS.readObs(PolicyClaimDocument, {
    //         claim_id: this.insuredInformation.claimType,
    //         // policy_id: this.insured.product['id']
    //     })
    //         .subscribe(
    //             (res: ClaimDoc[]) => {
    //                 this.document = res['data'];
    //                 this.CD.detectChanges();
    //             },
    //             err => {
    //                 console.error(err);
    //                 notify('Failed to retrieve data', 'error', 600);
    //             }
    //         );
    // }

    getClaimFlowType(flowId): Subscription {
        return this.DS.readObs(ClaimFlowType, {
            'claim_flow_id': flowId
        })
            .subscribe(
                (res: ClaimFlowType[]) => {
                    this.claimFlowType = res['data'].filter(x => x.flowType === 'Claim Registration');

                    if (this.claimFlowType.length > 0) {
                        this.isFlowFound = true;
                    } else {
                        this.isFlowFound = false;
                    }

                    if (this.claimFlowType[0]['inputAmount']) {
                        this.isInputAmount = true;
                    } else {
                        this.isInputAmount = false;
                    }
                    this.CD.detectChanges();
                },
                err => {
                    console.error(err);
                    notify('Failed to retrieve data', 'error', 600);
                }
            );
    }

    getCompanyClaim(policyNo, claimTypeCode): Subscription {

        return this.DS.readObs(CompanyClaim, {
            'policy_no': policyNo,
            'claim_type_code': claimTypeCode
        })
            .subscribe(
                (res: CompanyClaim[]) => {
                    if (res['data'].length > 0) {
                        this.companyClaim = res;
                        if (res['data'][0].needBeneficiaryInfo) {
                            this.isNeedBenefiecyInfo = true;
                        } else {
                            this.isNeedBenefiecyInfo = false;
                        }
                        if (res['data'][0].needBankInsured) {
                            this.isNeedBankInsured = true;
                        } else {
                            this.isNeedBankInsured = false;
                        }

                        this.isPageLoadingVisible = false;

                        this.getFormsDocument(res['data'][0].id);
                        this.CD.detectChanges();
                    } else {
                        notify('Failed to retrieve data', 'error', 600);

                        this.isPageLoadingVisible = false;
                    }
                },
                err => {
                    console.error(err);
                    notify('Failed to retrieve data', 'error', 600);
                }
            );
    }

    onClaimTypeChanged(e): void {
        this.isPageLoadingVisible = true;
        this.insuredInformation.beneficiary = '';
        this.insuredInformation.beneficiaryKtpNo = '';
        this.insuredInformation.relationshipBeneficiary = '';
        this.insuredInformation.beneficiaryFamilyCardNo = '';

        this.insuredInformation.accountNo = '';
        this.insuredInformation.accountCurrencyCode = '';
        this.insuredInformation.accountBankCode = '';
        this.insuredInformation.accountBankText = '';
        this.insuredInformation.accountName = '';

        this.insuredInformation.claimType = e.value;
        this.selectedClaimType = this.claimType['data'].find(x => x.claimTypeCode === e.value);

        if (e.value) {
            this.getCompanyClaim(this.insured.product['policyNo'], this.selectedClaimType['claimTypeCode']);
        }
    }

    getRelation(): Subscription {
        return this.DS.readObs(Relation)
            .subscribe(
                (res: Relation[]) => {
                    this.relations = res;
                    this.CD.detectChanges();
                },
                err => {
                    console.error(err);
                    notify('Failed to retrieve data', 'error', 600);
                }
            );
    }

    onIsInsuredChanged(e): void {
        this.claimForm.instance.validate();
        if (e.value === 'Yes') {
            this.insuredInformation.claimantName = this.insuredInformation.insuredName;
            this.insuredInformation.claimantPhoneNo = this.insuredInformation.phoneNo;
            this.insuredInformation.claimantRelationship = 'REL01';
            this.insuredInformation.claimantEmailAddress = this.insuredInformation.email;
            // setTimeout(() => {
                this.isInsured = 'Yes';
            //     this.CD.detectChanges();
            // }, 1000);
        } else {
            this.insuredInformation.claimantName = '';
            this.insuredInformation.claimantPhoneNo = '';
            this.insuredInformation.claimantRelationship = '';
            this.insuredInformation.claimantEmailAddress = '';
            // setTimeout(() => {
                this.isInsured = 'No';
            //     this.CD.detectChanges();
            // }, 1000);
        }
    }


    

    

    // getDetailClaimDoc(transactionId): Subscription {
    //     return this.DS.readObs(ClaimDocFile, {
    //         'transaction_document_id': transactionId
    //     })
    //         .subscribe(
    //             (res: ClaimDocFile[]) => {
    //                 this.claimDocFile = res['data'];
    //                 this.CD.detectChanges();
    //             },
    //             err => {
    //                 console.error(err);
    //                 notify('Failed to retrieve data', 'error', 600);
    //             }
    //         );
    // }

    

    getInitialData(): void {
        const companyPolicyObs = this.DS.readObs(CompanyPolicy, {
            company_id: this.AuthService.getCompanyId()
        });
        const illnessObs = this.DS.readObs(Illness);
        const currencyObs = this.DS.readObs(Currency);
        const relationObs = this.DS.readObs(Relation);
        const bankObs = this.DS.readObs(Bank);
        const claimStatusObs = this.DS.readObs(ClaimStatus);
        
        forkJoin([companyPolicyObs, illnessObs,
            currencyObs, relationObs, bankObs, claimStatusObs])
            .pipe(takeUntil(this.unsub))
            .subscribe(
                (res: any) => {
                    this.companyPolicy = res[0];
                    this.illness = res[1];
                    this.currency = res[2];
                    this.relations = res[3];
                    this.bank = res[4];
                    this.claimStatus = res[5];
                    
                    this.isPageLoadingVisible = false;
                    this.CD.detectChanges();
                },
                err => {
                    notify('Failed to retrieve data', 'error', 600);
                    this.isPageLoadingVisible = false;
                    this.CD.detectChanges();

                }
            );
    }

    getClaimType(policy_id): void {
        this.DS.readObs(ClaimType, {
            policy_id
        }).subscribe(
            (res: ClaimType[]) => {
                
                this.claimType = res;
                // this.claimType = res['data'].filter(x => x.usedByCustomer);
                this.CD.detectChanges();
            },
            err => {
                console.error(err);
                notify('Failed to retrieve data', 'error', 600);
            }
        );
    }

    postRegistration(): void {
        if (this.isButtonRegistrationLoading) {
            return;
        }

        if (!this.isFlowFound) {
            notify('Data can not be submitted. Please contact administrator!', 'error', 600);
            return;
        }

        this.isButtonRegistrationLoading = true;
        this.postRegistrationData = this.insuredInformation;
        const data = {
            
            accountBankCode: this.insuredInformation.accountBankCode,
            accountBankText: this.insuredInformation.accountBankText,
            accountCurrencyCode: this.insuredInformation.accountCurrencyCode,
            accountName: this.insuredInformation.accountName,
            accountNo: this.insuredInformation.accountNo,
            
            beneficiary: this.insuredInformation.beneficiary,
            beneficiaryFamilyCardNo: this.insuredInformation.beneficiaryFamilyCardNo,
            beneficiaryKtpNo: this.insuredInformation.beneficiaryKtpNo,
            beneficiaryRelationInsuredCode:  this.insuredInformation.relationshipBeneficiary,
            
            claimAmount: this.insuredInformation.claimAmount,
            claimCurrencyCode: this.insuredInformation.currency,
            claimStatusCode: this.checkStatus(),
            claimTypeCode: this.selectedClaimType['claimTypeCode'],

            claimantEmailAddress: this.insuredInformation.claimantEmailAddress,
            claimantName: this.insuredInformation.claimantName,
            claimantPhoneNo: this.insuredInformation.claimantPhoneNo,
            claimantRelationInsuredCode: this.insuredInformation.claimantRelationship,

            eformId: this.selectedProduct['editsFormSetting'],
            emailAddress: this.insuredInformation.email,
            eventDate: moment(this.insuredInformation.eventDate).format('YYYY-MM-DD'),
            idMemberPartner: this.insuredInformation.idMemberPartner,
            illnessCode: this.insuredInformation.illness,
            isInsured: this.isInsured === 'Yes' ? '1' : '0',
            mobileNo: this.insuredInformation.phoneNo,
            participant: this.insuredInformation.insuredName,
            participantNo: this.insuredInformation.insuredNo,
            periodEndDate: this.insuredInformation.insurancePeriodTo,
            periodStartDate: this.insuredInformation.insurancePeriodFrom,
            policyNo: this.insuredInformation.policyNo,
            productName: this.insuredInformation.productName,
            sourceApp: _.get(this.insured, 'product.sourcePolicy.code'),
            sumAssuredAmount: this.insuredInformation.sumAssured,
            sumAssuredCurrencyCode: this.insuredInformation.currency,
            virtualAccount: this.insuredInformation.virtualAccount,

            documents: this.getDocuments(),

            illnessText: this.insuredInformation.illnessText,
            idUserPartner: this.AuthService.getUser()['username'],
            partner: this.AuthService.getCompanyId(),
            partnerName: this.selectedProduct['company']['name']

        };

        this.DS.createObs(Claim, data).subscribe(
            (res: any) => {
                this.isButtonRegistrationLoading = false;
                this.CD.detectChanges();
                notify(res.message, res.ok ? 'success' : 'error', 600);
                
                if (_.get(res, 'data.claimAutoGenerated.length') > 0) {
                    this.autoGeneratedData = res.data.claimAutoGenerated;
                    this.isPopupVisible = true;
                    this.CD.detectChanges();

                } else {
                    setTimeout(() => {
                        this.router.navigate(['dashboard']);
                    }, 600);
                }
            },
            err => {
                console.error(err);
                this.isButtonRegistrationLoading = false;
                this.CD.detectChanges();
                notify('Failed to retrieve data', 'error', 600);
            }
        );
    }
    getDocuments(): Array<any> {
        const tmp = [];
        

        this.documentFiles.map(x => {
            x.map(y => {
                tmp.push({
                    documentCode: y.documentCode,
                    filename: y.fileName
                });
            });
        });

        this.document.filter(x => {
            const found = tmp.filter(y => y.documentCode === x.documentCode)
            if (found.length === 0) {
                tmp.push({
                    documentCode: x.documentCode,
                    fileName: ''
                });
            }
        });

        return tmp;

    }
    onBankChanged(e): void {
        this.insuredInformation.bankCode = e.value;
        this.insuredInformation.accountBankText = '';
        if (e.value === 'BANK190000') {
            this.isOtherBank = true;
        } else {
            this.isOtherBank = false;
        }
        // this.CD.detectChanges();
    }

    onIllnessChanged(e): void {
        this.insuredInformation.illness = e.value;
        if (e.value === 'ILLN190000') {
            this.isOtherIllness = true;
            this.insuredInformation.otherIllness = '';
        } else {
            this.isOtherIllness = false;
            this.insuredInformation.otherIllness = '';
        }

        this.CD.detectChanges();

    }

    doResetSearch(): void {
        if (this.isButtonListLoading){
            return;
        }

        this.insured = {
            product: '',
            insuredName: '',
            idMemberPartner: '',
            ktpNo: '',
            dateOfBirth: '',
        };

        this.policy = [];
    }

    getFormsDocument(claim_id): void {
        this.DS.readObs(Document, {
            claim_id
        }).subscribe(
            (res: Document[]) => {
                this.document = res['data'];
                this.CD.detectChanges();
            },
            err => {
                console.error(err);
                notify('Failed to retrieve data', 'error', 600);
            }
        );
    }

    getStatus(): void {
        this.DS.readObs(ClaimStatus).subscribe(
            (res: ClaimStatus[]) => {
                this.claimStatus = res['data'];
                this.CD.detectChanges();
            },
            err => {
                console.error(err);
                notify('Failed to retrieve data', 'error', 600);
            }
        );
    }

    checkStatus(): string {
        if (this.claimFlowType[0]['checkDocument']) {
            const mandatory = this.document.filter((x) => x['condition'] === true);

            const check = mandatory.filter((x) => {
                if (this.documentFiles[x.documentId]) {
                    return this.documentFiles[x.documentId]
                }
                
                // return this.documentFiles.find((y) => {
                    // y.map(z => {
                    //     return z.id === x.documentId;
                    // })
                // });
            });


            if (check.length === mandatory.length) {
                return 'SC002';
            } else {
                return 'SC001';
            }

        } else {
            return 'SC002';
        }
        
    }

    formatDate(start, end): string {
        return `${moment(start).format('DD MMMM YYYY')} - ${moment(end).format('DD MMMM YYYY')}`;
    }

    onDocumentChanged(e): void {
        this.documentFiles = e;
    }

    claimAmountChanged(e): void {
        this.insuredInformation.claimAmount = e.value;
    }

    closeModal(): void {
        this.isPopupVisible = false;
        this.CD.detectChanges();
        setTimeout(() => {
            this.router.navigate(['dashboard']);
        }, 200);
    }

}
